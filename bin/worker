#!/usr/bin/env python3

"""

Test contract address: 0xF0cb6b45a902d2aa225305E5F0b920eb3D81c42B

"""

import json
import getpass
import argparse
import logging
import sys
import os
import time
import requests

from datetime import datetime as dt
from datetime import timedelta
from collections import deque
from cpc_fusion import Web3
from logging import handlers

DEFAULT_ENDPOINT = 'https://civilian.cpchain.io'

logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler = handlers.RotatingFileHandler('logs/worker.log', maxBytes=10 * 1024 * 1024, backupCount=5)
handler.setFormatter(formatter)

log = logging.getLogger()
log.addHandler(handler)

# args parser
parser = argparse.ArgumentParser()

class dotdict(dict):
    """dot.notation access to dictionary attributes"""
    __getattr__ = dict.get
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__


def get_cf(args):
    # web3 client
    cf = Web3(Web3.HTTPProvider(args.endpoint))
    return cf


def post_message(url, message, title="staking-worker"):
    headers = {"Content-Type": "application/json"}
    data = {'msgtype': 'markdown',
            'markdown': {
                'title': title,
                'text': message
            },
            'at': {
                "isAtAll": True
            }
        }
    response = requests.post(url=url, headers=headers, json=data)
    result = response.json()
    log.info(result)

def get_instance(cf, args):
    with open(args.contract_file, 'r') as fr:
        contract_data = json.load(fr)
    instance = cf.cpc.contract(
        abi=contract_data['abi'], address=args.contract_addr)
    return instance


def load_keystore(cf, args):
    keystorePath = args.keystore
    with open(keystorePath, 'r') as fr:
        ks = json.load(fr)
        addr = cf.toChecksumAddress(ks['address'])
        return ks, addr


def submit_tx(cf, ks, tx):
    password = getpass.getpass("Please input your password: ")
    decrypted_key = cf.cpc.account.decrypt(ks, password)
    password = ""
    signed_txn = cf.cpc.account.signTransaction(tx, decrypted_key)
    tx_hash = cf.cpc.sendRawTransaction(signed_txn.rawTransaction)
    receipt = cf.cpc.waitForTransactionReceipt(tx_hash)
    if receipt.status == 0:
        print(receipt)
        log.info('Sorry, failed.')
    else:
        log.info('Success')
    return receipt


def refund(args):
    """ withdraw
    """
    cf = get_cf(args)
    contract = get_instance(cf, args)
    to = cf.toChecksumAddress(args.to)

    # build tx
    ks, addr = load_keystore(cf, args)
    gas_price = cf.cpc.gasPrice
    nonce = cf.cpc.getTransactionCount(addr)
    tx = contract.functions.refund(to).buildTransaction({
        'gasPrice': gas_price,
        "nonce": nonce,
        "gas": 300000,
        "from": addr,
        "value": cf.toWei(args.value, 'ether'),
        "type": 0,
        "chainId": 337
    })

    # send tx
    receipt = submit_tx(cf, ks, tx)

    if receipt.status != 0:
        events = contract.events['RefundMoney']().createFilter(
            fromBlock=receipt.blockNumber).get_all_entries()
        for e in events:
            value = cf.fromWei(e.args['amount'], 'ether')
            log.info(
                f"Refund to: {e.args['addr']}, value: {value}")


def get_balance(args):
    cf = get_cf(args)
    instance = get_instance(cf, args)
    addr = cf.toChecksumAddress(args.address)

    # address
    balance = cf.fromWei(instance.functions.workerBalanceOf(addr).call(), 'ether')
    interest = cf.fromWei(instance.functions.getWorkerInterest(addr).call(), 'ether')

    log.info('Balance: %s', balance)
    log.info('Interest: %s', interest)


def checkExpireTxsQueue(q: deque):
    # 检测队列，如果队列头的时间与现在超过 24 小时，则弹出
    now = dt.now()
    while True:
        if len(q) == 0:
            break
        if now - q[0]['time'] >= timedelta(days=1):
            q.popleft()
        else:
            break


def sumOfQueue(q: deque):
    return sum([i['value'] for i in q])


def handle_event(txs: deque, cf, instance, decrypted_key, addr, e, maxValue: float):
    value = cf.fromWei(e.args['value'], 'ether')
    selected = e.args['selectedWorker']
    to = e.args['account']
    log.info(f"slected worker: {selected.lower()}")
    if selected.lower() == addr.lower():
        log.info(
            f"Selected worker: {selected}, value: {value}, start to refund")
        # 判断今天是否到了最大值
        isFirst = True
        while True:
            sum_now = sumOfQueue(txs)
            if sum_now >= maxValue:
                log.info(f"Please wait, because today's amount:{sum_now} CPC greater than the maxValue:{maxValue} CPC")
                if isFirst:
                    post_message(f"{addr} exceed the maxValue: {maxValue} CPC, please be carefully!!!")
                    isFirst = False
                # 清理过期的交易
                checkExpireTxsQueue(txs)
                time.sleep(10)                
            else:
                break
        gas_price = cf.cpc.gasPrice
        nonce = cf.cpc.getTransactionCount(addr)
        tx = instance.functions.refund(to).buildTransaction({
            'gasPrice': gas_price,
            "nonce": nonce,
            "gas": 300000,
            "from": addr,
            "value": cf.toWei(value, 'ether'),
            "type": 0,
            "chainId": 337
        })

        # send tx
        signed_txn = cf.cpc.account.signTransaction(tx, decrypted_key)
        tx_hash = cf.cpc.sendRawTransaction(signed_txn.rawTransaction)
        receipt = cf.cpc.waitForTransactionReceipt(tx_hash)
        if receipt.status == 0:
            print(receipt)
            log.info('Sorry, refund failed.')
        else:
            txs.append({"time": dt.now(), "value": float(value)})
            checkExpireTxsQueue(txs)
            log.info('Refund success')

def run(args):
    dingding_url = args.dingding
    cf = get_cf(args)
    instance = get_instance(cf, args)
    ks, addr = load_keystore(cf, args)

    # read password
    with open(args.password, 'r') as f:
        password = "".join(f.readlines())
    password = password.strip()
    decrypted_key = cf.cpc.account.decrypt(ks, password)

    # read .worker.json
    FILE_NAME = '.worker.json'
    context = dotdict({'fromBlock': 5953500 })
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, 'r') as f:
            context = json.load(f)
    
    context = dotdict(context)

    txs = deque()

    maxValue = float(args.max_value)

    # Listen the withdraw event from the start block
    while True:
        log.info("#Block %d", context.fromBlock)
        events = instance.events['Withdraw']().createFilter(
            fromBlock=context.fromBlock).get_all_entries()
        tx_err = False
        for e in events:
            try:
                handle_event(txs, cf, instance, decrypted_key, addr, e, maxValue)
            except Exception as e:
                log.error(e)
                post_message(dingding_url, str(e))
                if 'replacement transaction underpriced' in str(e):
                    # 跟 Worker 的挖矿交易重复，等待 10 秒后退出循环
                    time.sleep(10)
                    tx_err = True
                    break
                else:
                    return
            context.fromBlock = e['blockNumber']
        if tx_err:
            continue
        if cf.cpc.blockNumber <= context.fromBlock:
            current = cf.cpc.blockNumber
            while current == cf.cpc.blockNumber:
                time.sleep(0.1)
            context.fromBlock = cf.cpc.blockNumber
        else:
            context.fromBlock += 1
        with open(FILE_NAME, 'w') as f:
            f.write(json.dumps(context))


def build_parser(subparsers, name, func=None, helps="Help", keystore=False,
                 contract_file=False, endpoint=False, contract_address=False):
    parser = subparsers.add_parser(name, help=helps)
    if keystore:
        parser.add_argument('--keystore', required=True)
    if contract_file:
        parser.add_argument('--contract-file', required=True)
    if endpoint:
        parser.add_argument('--endpoint', type=str, default=DEFAULT_ENDPOINT)
    if contract_address:
        parser.add_argument('--contract-addr', type=str, required=True)
    parser.set_defaults(func=func)
    return parser


def tmp(args):
    cf = get_cf(args)
    instance = get_instance(cf, args)
    context = dotdict({'fromBlock': 6870782 })
    events = instance.events['Withdraw']().createFilter(
            fromBlock=context.fromBlock).get_all_entries()
    for e in events:
        log.info(e.args)

subparsers = parser.add_subparsers(help="sub-command help")

# refund
refund_parser = build_parser(subparsers, 'refund', refund, 'refund money',
                              keystore=True, contract_file=True, endpoint=True, contract_address=True)
refund_parser.add_argument('--to', type=str, required=True)
refund_parser.add_argument('value', type=int)

# balance
balance_parser = build_parser(subparsers, 'get-balance', get_balance, 'get balance',
                              contract_file=True, endpoint=True, contract_address=True)
balance_parser.add_argument('address', type=str)

# run
run_parser = build_parser(subparsers, 'run', run, 'run',
                              keystore=True, contract_file=True, endpoint=True, contract_address=True)
run_parser.add_argument('--password', type=str, required=True)
run_parser.add_argument('--max-value', type=float, default=500000) # 风控机制，每天最多提现 50 万
run_parser.add_argument('--dingding', type=str, required=True) # 钉钉报警

# tmp for test
tmp_parser = build_parser(subparsers, 'tmp', tmp, 'tmp',
                              keystore=False, contract_file=True, endpoint=True, contract_address=True)

args = parser.parse_args()

if len(args.__dict__) <= 1:
    # No arguments or subcommands were given.
    parser.print_help()
    parser.exit()

args.func(args)
