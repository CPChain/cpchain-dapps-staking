#!/usr/bin/env python3

"""

Test contract address: 0xF0cb6b45a902d2aa225305E5F0b920eb3D81c42B

"""

from datetime import datetime as dt
import requests
import json
import time
import getpass
import argparse
import logging
import os
from os import remove
import sys
import threading
import queue

from cpc_fusion import Web3

DEFAULT_ENDPOINT = 'https://civilian.cpchain.io'

FILE_NAME = ".staking.json"

EVENT_ADD_WORKER = 'AddWorker'
EVENT_REMOVE_WORKER = 'RemoveWorker'


class dotdict(dict):
    """dot.notation access to dictionary attributes"""
    __getattr__ = dict.get
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__


logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
log = logging.getLogger()

# args parser
parser = argparse.ArgumentParser()


def load_data(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, 'r') as fr:
        return json.load(fr)


def save(filename, context):
    with open(filename, 'w') as f:
        f.write(json.dumps(context))


context = dotdict(load_data(FILE_NAME))


def get_cf(args):
    # web3 client
    cf = Web3(Web3.HTTPProvider(args.endpoint))
    return cf


def get_contract(cf, args):
    # load contract
    with open(args.contract_file, 'r') as fr:
        contract_data = json.load(fr)
    contract = cf.cpc.contract(
        abi=contract_data['abi'], bytecode=contract_data['bytecode'])
    return contract, 'Staking'


def get_instance(cf, args):
    with open(args.contract_file, 'r') as fr:
        contract_data = json.load(fr)
    instance = cf.cpc.contract(
        abi=contract_data['abi'], address=context.address)
    return instance


def load_keystore(cf, args):
    keystorePath = args.keystore
    with open(keystorePath, 'r') as fr:
        ks = json.load(fr)
        addr = cf.toChecksumAddress(ks['address'])
        return ks, addr


def submit_tx(cf, ks, tx, password_file=None):
    if password_file is None:
        password = getpass.getpass("Please input your password: ")
    else:
        with open(password_file, 'r') as f:
            password = "".join(f.readlines())
        password = password.strip()
    decrypted_key = cf.cpc.account.decrypt(ks, password)
    password = ""
    signed_txn = cf.cpc.account.signTransaction(tx, decrypted_key)
    tx_hash = cf.cpc.sendRawTransaction(signed_txn.rawTransaction)
    receipt = cf.cpc.waitForTransactionReceipt(tx_hash)
    if receipt.status == 0:
        print(receipt)
        log.info('Sorry, failed.')
    else:
        log.info('Success')
    return receipt


def deploy(args):
    """ deploy contract
    """
    cf = get_cf(args)

    contract, name = get_contract(cf, args)

    # build tx
    keystorePath = args.keystore
    with open(keystorePath, 'r') as fr:
        ks = json.load(fr)
        addr = cf.toChecksumAddress(ks['address'])
    gas_price = cf.cpc.gasPrice
    nonce = cf.cpc.getTransactionCount(addr)
    estimated_gas = contract.constructor().estimateGas()
    tx = contract.constructor().buildTransaction({
        'gasPrice': gas_price,
        "nonce": nonce,
        "gas": estimated_gas,
        "from": addr,
        "value": cf.toWei(0, 'ether'),
        "type": 0,
        "chainId": 337
    })

    # send tx
    password = getpass.getpass("Please input your password:")
    decrypted_key = cf.cpc.account.decrypt(ks, password)
    password = ""
    signed_txn = cf.cpc.account.signTransaction(tx, decrypted_key)
    tx_hash = cf.cpc.sendRawTransaction(signed_txn.rawTransaction)

    # get tx receipt to get contract address
    tx_receipt = cf.cpc.waitForTransactionReceipt(tx_hash)
    address = tx_receipt['contractAddress']
    print(f'{name} Address: {address}')
    context['address'] = address
    context['fromBlock'] = tx_receipt.blockNumber
    context['deployedBlockNumber'] = tx_receipt.blockNumber
    return address


def to_cpc(cf, value):
    return cf.fromWei(value, 'ether')


def show_configs(args):
    cf = get_cf(args)
    contract = get_instance(cf, args)
    # show configs
    enable = contract.functions.enabled().call()
    withdraw_fee_numerator = contract.functions.withdraw_fee_numerator().call()
    withdraw_fee_denominator = contract.functions.withdraw_fee_denominator().call()
    worker_balance_limit = to_cpc(
        cf, contract.functions.worker_balance_limit().call())
    user_balance_limit = to_cpc(
        cf, contract.functions.user_balance_limit().call())
    tx_upper_limit = to_cpc(cf, contract.functions.tx_upper_limit().call())
    tx_lower_limit = to_cpc(cf, contract.functions.tx_lower_limit().call())
    withdraw_upper_limit = to_cpc(
        cf, contract.functions.withdraw_upper_limit().call())
    print('=' * 20)
    print("Enable:", enable)
    print("Withdraw Fee Numerator:", withdraw_fee_numerator)
    print("Withdraw Fee Denominator:", withdraw_fee_denominator)
    print("Worker Balance Limit:", worker_balance_limit, 'CPC')
    print("User Balance Limit:", user_balance_limit, 'CPC')
    print("Tx Upper Limit:", tx_upper_limit, 'CPC')
    print("Tx Lower Limit:", tx_lower_limit, 'CPC')
    print("Withdraw Upper Limit:", withdraw_upper_limit, 'CPC')
    print('=' * 20)
    print("Worker's cnt:", contract.functions.workersCnt().call())
    print('=' * 20)
    print("Total balance:", to_cpc(
        cf, contract.functions.total_balance().call()), 'CPC')
    print("Worker total balance:", to_cpc(cf, contract.functions.workers_total_balance().call()), 'CPC')


def add_worker(args):
    """ Add a worker
    """
    cf = get_cf(args)
    instance = get_instance(cf, args)
    worker_addr = cf.toChecksumAddress(args.worker)
    gas_price = cf.cpc.gasPrice

    ks, addr = load_keystore(cf, args)

    nonce = cf.cpc.getTransactionCount(addr)
    tx = instance.functions.addWorker(worker_addr).buildTransaction({
        'gasPrice': gas_price,
        "nonce": nonce,
        "gas": 300000,
        "from": addr,
        "value": 0,
        "type": 0,
        "chainId": 337
    })
    submit_tx(cf, ks, tx)


def remove_worker(args):
    """ Remove a worker
    """
    cf = get_cf(args)
    instance = get_instance(cf, args)
    worker_addr = cf.toChecksumAddress(args.worker)
    gas_price = cf.cpc.gasPrice

    ks, addr = load_keystore(cf, args)

    nonce = cf.cpc.getTransactionCount(addr)
    tx = instance.functions.removeWorker(worker_addr).buildTransaction({
        'gasPrice': gas_price,
        "nonce": nonce,
        "gas": 300000,
        "from": addr,
        "value": 0,
        "type": 0,
        "chainId": 337
    })
    submit_tx(cf, ks, tx)


def is_worker(args):
    cf = get_cf(args)
    contract = get_instance(cf, args)
    worker_addr = cf.toChecksumAddress(args.worker)
    b = contract.functions.isWorker(worker_addr).call()
    log.info(f"This address is worker: {b}")


def get_all_workers(cf, instance, args):
    # add worker
    events = instance.events[EVENT_ADD_WORKER]().createFilter(
        fromBlock=context.deployedBlockNumber).get_all_entries()
    workers = []
    for e in events:
        workers.append({
            'address': e['args']['account'],
            'number': e['blockNumber']
        })

    # remove worker
    events = instance.events[EVENT_REMOVE_WORKER]().createFilter(
        fromBlock=context.deployedBlockNumber).get_all_entries()
    for e in events:
        for w in workers:
            if e['args']['account'] == w['address'] and e['blockNumber'] > w['number']:
                workers.remove(w)

    return workers


def list_workers(args):
    cf = get_cf(args)
    instance = get_instance(cf, args)
    workers = get_all_workers(cf, instance, args)

    for w in workers:
        balance = cf.cpc.getBalance(w['address'])
        balance = cf.fromWei(balance, 'ether')
        log.info(f'{w["address"]}: {balance}')


def stats_interest(args):
    """ 利息统计，按日统计，记录在 .staking.json 文件中，防止重复
    """
    # list workers
    cf = get_cf(args)
    instance = get_instance(cf, args)
    workers = get_all_workers(cf, instance, args)
    # iterate all workers to get yesterday interest
    YESTERDAY_FILE = '.yesterday.json'
    yesterday_data = dict(yesterday=None)
    if os.path.exists(YESTERDAY_FILE):
        yesterday_data = load_data(YESTERDAY_FILE)
    yesterday_data = dotdict(yesterday_data)
    yesterday = yesterday_data.yesterday
    if yesterday is None:
        yesterday = dt.strftime(dt.now(), '%Y-%m-%d')
    else:
        if yesterday == dt.strftime(dt.now(), '%Y-%m-%d'):
            log.error("The yesterday interest have been distributed.")
            return
        else:
            yesterday = dt.strftime(dt.now(), '%Y-%m-%d')
    # get rewards
    api = 'https://api.cpchain.io/chain/reward-history/{address}/?date={yesterday}'
    rewards = 0
    for worker in workers:
        addr = worker['address']
        log.info(f"get {yesterday}'s reward of {addr}")
        res = requests.get(api.format(address=addr, yesterday=yesterday))
        data = res.json()
        if data['count'] == 0:
            log.error(f"worker {addr} didn't get any rewards at {yesterday}")
        else:
            rewards += data['results'][0]['rewards']
    log.info(f'total rewards yesterday: {rewards} CPC')
    if rewards >= (8640 * 9.51 * 2) / 3:  # 如果奖励总数超过了一天产量的 2/3，则说明不可能
        log.error("This is error because yesterday's rewards is too large.")
    else:
        interest = 0.5 * rewards
        log.info(
            f"distributed {yesterday}'s interest: {interest} CPC to the staking contract.")
        # build tx
        ks, addr = load_keystore(cf, args)
        gas_price = cf.cpc.gasPrice
        nonce = cf.cpc.getTransactionCount(addr)
        tx = instance.functions.statsInterest(cf.toWei(interest, 'ether')).buildTransaction({
            'gasPrice': gas_price,
            "nonce": nonce,
            "gas": 300000,
            "from": addr,
            "value": cf.toWei(0, 'ether'),
            "type": 0,
            "chainId": 337
        })

        # send tx
        receipt = submit_tx(cf, ks, tx, args.password)

        if receipt.status != 0:
            events = instance.events['StatsInterest']().createFilter(
                fromBlock=receipt.blockNumber).get_all_entries()
            for e in events:
                value = cf.fromWei(e.args['amount'], 'ether')
                addr_cnt = e.args['address_cnt']
                height = e.args['height']
                total_balance = e.args['total_balance']
                log.info(
                    f"distributed success, total_balance: {total_balance}, value: {value}, address_cnt: {addr_cnt}, height: {height}")
            yesterday_data.yesterday = dt.strftime(dt.now(), '%Y-%m-%d')
            save(YESTERDAY_FILE, yesterday_data)
        else:
            pass

def appeal_refund(args):
    cf = get_cf(args)
    contract = get_instance(cf, args)
    to = cf.toChecksumAddress(args.to)

    # build tx
    ks, addr = load_keystore(cf, args)
    gas_price = cf.cpc.gasPrice
    nonce = cf.cpc.getTransactionCount(addr)
    tx = contract.functions.appealRefund(to).buildTransaction({
        'gasPrice': gas_price,
        "nonce": nonce,
        "gas": 300000,
        "from": addr,
        "value": cf.toWei(args.value, 'ether'),
        "type": 0,
        "chainId": 337
    })

    # send tx
    receipt = submit_tx(cf, ks, tx)

    if receipt.status != 0:
        events = contract.events['AdminAppealRefund']().createFilter(
            fromBlock=receipt.blockNumber).get_all_entries()
        for e in events:
            value = cf.fromWei(e.args['amount'], 'ether')
            log.info(
                f"Refund to: {e.args['user']}, value: {value}")


def appeal_refund_handler(q, cf, instance, decrypted_key, addr):
    while True:
        e = q.get()
        to, value, height = e.args['account'], e.args['value'], e.args['blockHeight']
        value = cf.fromWei(value, 'ether')
        log.info(
            f"start to refund to the appeald user: {to} with {value} CPC, reported at #{height}")
        tx = instance.functions.appealRefund(to).buildTransaction({
            'gasPrice': cf.cpc.gasPrice,
            "nonce": cf.cpc.getTransactionCount(addr),
            "gas": 300000,
            "from": addr,
            "value": cf.toWei(value, 'ether'),
            "type": 0,
            "chainId": 337
        })
        signed_txn = cf.cpc.account.signTransaction(tx, decrypted_key)
        tx_hash = cf.cpc.sendRawTransaction(signed_txn.rawTransaction)
        receipt = cf.cpc.waitForTransactionReceipt(tx_hash)
        if receipt.status != 0:
            events = instance.events['AdminAppealRefund']().createFilter(
                fromBlock=receipt.blockNumber).get_all_entries()
            for e in events:
                value = cf.fromWei(e.args['amount'], 'ether')
                log.info(
                    f"refund success: {e.args['user']}, value: {value}")
        else:
            log.error(
                f"refund failed: {to} with {value} CPC, reported at #{height}")
        q.task_done()


def run(args):
    """
    Monitoring the event for stats-interest and appeal-refund
    """
    cf = get_cf(args)
    instance = get_instance(cf, args)
    ks, addr = load_keystore(cf, args)

    # read password
    with open(args.password, 'r') as f:
        password = "".join(f.readlines())
    password = password.strip()
    decrypted_key = cf.cpc.account.decrypt(ks, password)

    # appeal-refund
    q1 = queue.Queue()

    threading.Thread(target=appeal_refund_handler, args=(
        q1, cf, instance, decrypted_key, addr), daemon=True).start()

    while True:
        log.info("#Block %d", context.fromBlock)
        # Appeal
        events = instance.events['Appeal']().createFilter(
            fromBlock=context.fromBlock).get_all_entries()
        for e in events:
            q1.put(e)
            context.fromBlock = e['blockNumber']
        if cf.cpc.blockNumber <= context.fromBlock:
            current = cf.cpc.blockNumber
            while current == cf.cpc.blockNumber:
                time.sleep(0.1)
            context.fromBlock = cf.cpc.blockNumber
        else:
            context.fromBlock += 1
        save(FILE_NAME, context)


def change_owner(args):
    cf = get_cf(args)
    instance = get_instance(cf, args)
    ks, addr = load_keystore(cf, args)

    target = cf.toChecksumAddress(args.target)

    gas_price = cf.cpc.gasPrice
    nonce = cf.cpc.getTransactionCount(addr)
    tx = instance.functions.changeOwner(target).buildTransaction({
        'gasPrice': gas_price,
        "nonce": nonce,
        "gas": 300000,
        "from": addr,
        "value": cf.toWei(0, 'ether'),
        "type": 0,
        "chainId": 337
    })

    # send tx
    submit_tx(cf, ks, tx)

def build_parser(subparsers, name, func=None, helps="Help", keystore=False,
                 contract_file=False, endpoint=False):
    parser = subparsers.add_parser(name, help=helps)
    if keystore:
        parser.add_argument('--keystore', required=True)
    if contract_file:
        parser.add_argument('--contract-file', required=True)
    if endpoint:
        parser.add_argument('--endpoint', type=str, default=DEFAULT_ENDPOINT)
    parser.set_defaults(func=func)
    return parser


subparsers = parser.add_subparsers(help="sub-command help")

# deploy
build_parser(subparsers, 'deploy', deploy, 'deploy contract',
             keystore=True, contract_file=True, endpoint=True)

# show-configs
build_parser(subparsers, 'show-configs', show_configs, 'show configurations',
             contract_file=True, endpoint=True)

# add-worker
add_worker_parser = build_parser(subparsers, 'add-worker', func=add_worker, helps='add worker', keystore=True,
                                 contract_file=True, endpoint=True)
add_worker_parser.add_argument('worker', type=str)

# remove worker
remove_worker_parser = build_parser(subparsers, 'remove-worker', func=remove_worker, helps='remove worker', keystore=True,
                                    contract_file=True, endpoint=True)
remove_worker_parser.add_argument('worker', type=str)

# is worker
is_worker_parser = build_parser(subparsers, 'is-worker', func=is_worker, helps='whether a address is a worker',
                                contract_file=True, endpoint=True)
is_worker_parser.add_argument('worker', type=str)

# list workers
list_workers_parser = build_parser(subparsers, 'list-workers', func=list_workers, helps='List workers', contract_file=True,
                                   endpoint=True)

# refund
refund_parser = build_parser(subparsers, 'appeal-refund', appeal_refund, 'refund money',
                             keystore=True, contract_file=True, endpoint=True)
refund_parser.add_argument('--to', type=str, required=True)
refund_parser.add_argument('value', type=int)

# stats interest
stats_interest_parser = build_parser(subparsers, 'stats-interest', stats_interest, 'stats interest',
                                     keystore=True, contract_file=True, endpoint=True)
stats_interest_parser.add_argument('--password', type=str, required=False)

# run
run_parser = build_parser(subparsers, 'run', run, 'refund money automatically',
                          keystore=True, contract_file=True, endpoint=True)
run_parser.add_argument('--password', type=str, required=True)

# change owner
change_owner_parser = build_parser(subparsers, 'change-owner', change_owner, 'change owner',
                          keystore=True, contract_file=True, endpoint=True)
change_owner_parser.add_argument('target', type=str)

args = parser.parse_args()

if len(args.__dict__) <= 1:
    # No arguments or subcommands were given.
    parser.print_help()
    parser.exit()

args.func(args)

# overwrite context
save(FILE_NAME, context)
